interface sql {
    variant sql-value {
        null,
        boolean(bool),
        int32(s32),
        int64(s64),
        float32(f32),
        float64(f64),
        text(string),
        bytes(list<u8>),
        timestamp(s64),
        uuid(string),
    }
    
    record sql-row {
        columns: list<tuple<string, sql-value>>,
    }
    
    record query-result {
        rows: list<sql-row>,
        rows-affected: u64,
    }
    
    variant sql-error {
        connection-failed(string),
        query-failed(string),
        transaction-failed(string),
        constraint-violation(string),
        not-found,
    }
    
    resource transaction {
        query: func(sql: string, params: list<sql-value>) -> result<query-result, sql-error>;
        execute: func(sql: string, params: list<sql-value>) -> result<u64, sql-error>;
        commit: func() -> result<_, sql-error>;
        rollback: func() -> result<_, sql-error>;
    }
    
    query: func(sql: string, params: list<sql-value>) -> result<query-result, sql-error>;
    execute: func(sql: string, params: list<sql-value>) -> result<u64, sql-error>;
    begin-transaction: func() -> result<transaction, sql-error>;
}